// template <typename Base, template <typename U> class Constness>
// typename btree_iterator<Base, Constness>::reference btree_iterator<Base, Constness>::operator*() const {
// 	// std::cout << "index is " << index << std::endl;
// 	return pointee->getVal(index);
// }

template <typename Base, template <typename U> class Constness>
btree_iterator<Base, Constness>& btree_iterator<Base, Constness>::operator++() {
	if (pointee->isFull()) {
		if (index != pointee->getSize() - 1) {
			if (pointee->getChild(index+1) != nullptr) {
				pointee = pointee->getChild(index + 1).get();
				findFirstChild();
			} else {
				++index;
			}
		} else {
			if (pointee->getChild(index+1) != nullptr) {
				pointee = pointee->getChild(index + 1).get();
				findFirstChild();
			} else {
				typename btree<Base>::Node* temp = pointee;
				findLastParent();
				if (isEnd) {
					pointee = temp;
					index = pointee->getSize();
				}
			}
		}
	} else {
		if (index < pointee->getSize() - 1) {
			++index;
		} else {
			typename btree<Base>::Node* temp = pointee;
			findLastParent();
			if (isEnd) {
				pointee = temp;
				index = pointee->getSize();
			}
		}
	}
	return *this;
}


template <typename Base, template <typename U> class Constness>
btree_iterator<Base, Constness>& btree_iterator<Base, Constness>::operator--() {
	// std::cout << "index  " << index << std::endl;
	if (index == pointee->getSize()) {
		--index;
		return *this;
	}
	if(pointee -> isFull()) {
		if (index == 0) {
			if (pointee -> getChild(0) != nullptr) {
				pointee = pointee->getChild(0).get();
				findLastChild();
			} else {
				typename btree<Base>::Node* temp = pointee;
				findFirstParent();
				if (isEnd) {
					pointee = temp;
					index = 0;
				}
			}
		} else {
			if (pointee -> getChild(index) != nullptr) {
				pointee = pointee -> getChild(index).get();
				findLastChild();
			} else {
				--index;
			}
		}
	} else {

		if (index != 0) {
			--index;
		} else {
			typename btree<Base>::Node* temp = pointee;
			findFirstParent();
			if (isEnd) {
				pointee = temp;
				index = 0;
			}
		}
	}
	return *this;
}

template <typename Base, template <typename U> class Constness> 
btree_iterator<Base, Constness> btree_iterator<Base, Constness>::operator ++(int){
	btree_iterator r = *this;
	operator ++();
	return r;
}

template <typename Base, template <typename U> class Constness> 
btree_iterator<Base, Constness> btree_iterator<Base, Constness>::operator --(int){
	btree_iterator r = *this;
		operator --();
		return r;
}

template <typename Base, template <typename U> class Constness>
void btree_iterator<Base, Constness>::findFirstParent() {
	while (pointee->getParent().get() != nullptr) {
		auto parent = pointee->getParent().get();
		size_t i = parent->findIndex(pointee);
		if (i != 0) {
	// std::cout << parent->getVal(0) << "fuck" << std::endl;
			pointee = parent;
			index = i - 1;
			return;
		}
		pointee = parent;
	}
	isEnd = true;
}



template <typename Base, template <typename U> class Constness>
void btree_iterator<Base, Constness>::findFirstChild(){
	while (pointee->getChild(0).get() != nullptr) {
		pointee = pointee->getChild(0).get();
	}
	index = 0;
}

template <typename Base, template <typename U> class Constness>
void btree_iterator<Base, Constness>::findLastChild(){
	while (pointee->getLast().get() != nullptr) {
		pointee = pointee->getLast().get();
	}
	index = pointee->getSize() - 1;
}


template <typename Base, template <typename U> class Constness>
void btree_iterator<Base, Constness>::findLastParent(){
	while (pointee->getParent().get() != nullptr) {
		auto parent = pointee->getParent().get();
		size_t i = parent->findIndex(pointee);
		if (i != pointee->getMaxSize()) {
			pointee = parent;
			index = i;
			return;
		}
		pointee = parent;
	}
	isEnd = true;
}


// template <typename Base, template <typename U> class Constness>
// btree_iterator<Base, Constness>& btree_iterator<Base, Constness>::operator =(const btree_iterator<Base, Constness>& b) {
// 	if (this != &b) {
// 		pointee = b.pointee;
// 		index = b.index;
// 	}
// 	return *this;
// }

template <typename Base, template <typename U> class Constness>
bool btree_iterator<Base, Constness>::operator ==(const btree_iterator& b) const {
	return (pointee == b.pointee && index == b.index);
}

template <typename Base, template <typename U> class Constness>
bool btree_iterator<Base, Constness>::operator !=(const btree_iterator& b) const {
	return !operator==(b);
}
